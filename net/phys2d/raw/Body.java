package net.phys2d.raw;

import java.util.ArrayList;
import java.util.Set;

import net.phys2d.math.ROVector2f;
import net.phys2d.math.Vector2f;

import net.phys2d.raw.shapes.Shape;

public interface Body {
	/** The maximum value indicating that body won't move */
	public static final float INFINITE_MASS = Float.MAX_VALUE;

	public boolean disabled();
	public void setEnabled(boolean enabled);
	public int getID();
	public int getGroup();
	public void setUserData(Object o);
	public Object getUserData();
	public void getConnected(BodyList list, ArrayList path, boolean stopAtStatic);
	public boolean isRotatable();
	public boolean isMoveable();
	public void setRotatable(boolean rotatable);
	public void setMoveable(boolean moveable);
	public void setCanRest(boolean canRest);
	public boolean canRest();
	public void collided(Body other);
	public void endFrame();
	public boolean isTouchingStatic(ArrayList path);
	public BodyList getTouching();
	public BodyList getConnected();
	public BodyList getConnected(boolean stopAtStatic);
	public boolean isStatic();
	public boolean isResting();
	public void setIsResting(boolean isResting);
	public void setGravityEffected(boolean gravity);
	public boolean getGravityEffected();
	public void addExcludedBody(Body other);
	public void removeExcludedBody(Body other);
	public Set<Body> getExcluded();
	public float getMass();
	public float getI();
	public void setRestitution(float rest);
	public float getRestitution();
	public void set(Shape shape, float m);
	public void setShape(Shape shape);
	public void setFriction(float friction);
	public void setRotation(float rotation);
	public void setDamping(float damping);
	public float getDamping();
	public void setRotDamping(float damping);
	public float getRotDamping();
	public Shape getShape();
	public void setPosition(float x, float y);
	public void move(float x, float y);
	public ROVector2f getPosition();
	public ROVector2f getLastPosition();
	public ROVector2f getPositionDelta();
	public ROVector2f getLastVelocity();
	public ROVector2f getVelocityDelta();
	public float getLastAngularVelocity();
	public float getAngularVelocityDelta();
	public float getRotation();
	public void adjustPosition(ROVector2f delta, float scale);
	public void adjustPosition(Vector2f delta);
	public void adjustRotation(float delta);
	public void setForce(float x, float y);
	public void setTorque(float t);
	public ROVector2f getVelocity();
	public float getAngularVelocity();
	public void adjustVelocity(ROVector2f delta);
	public void adjustAngularVelocity(float delta);
	public float getFriction();
	public ROVector2f getForce();
	public float getTorque();
	public void addForce(Vector2f f);
	public String toString();
	public int hashCode();
	public boolean equals(Object other);
	public ROVector2f getBiasedVelocity();
	public float getBiasedAngularVelocity();
	public void adjustBiasedVelocity(Vector2f delta);
	public void adjustBiasedAngularVelocity(float delta);
	public void resetBias();
	public float getEnergy();
	public long getBitmask();
	public void setBitmask(long bitmask);
	public void addBit(long bitmask);
	public void removeBit(long bitmask);
	public boolean added();
	public void setAdded(boolean added);
	public void setMaxVelocity(float maxX, float maxY);
	public void configureRestingBodyDetection(float hitTolerance, float rotationTolerance, float positionTolerance);
	public float getInvI();
	public float getInvMass();
	public void startFrame();
}
